<?xml version="1.0" encoding="UTF-8"?>
<ISUI>
 <window name='EVEBot'>
  <Visible>1</Visible>
  <BackGroundColor></BackGroundColor>
  <Border>0</Border>
  <X>200</X>
  <Y>10</Y>
  <Width>500</Width>
  <Height>370</Height>
  <Title>EVEBot Options</Title>

  <TitleBar template='EVESkin.Window.TitleBar'>
   <Width>100%</Width>
   <Height>20</Height>
   <Border>0</Border>
   <Children>
    <commandbutton name='Run EVEBot' template='EVESkin.Window.TitleBar.RunButton'>
     <X>0</X>
     <Y>0</Y>
     <Width>46</Width>
     <Height>20</Height>
     <OnLeftClick>
      Script[EVEBot]:Resume
      Script[EVEBot].VariableScope.EVEBot:Resume
      Echo EVEBot: Resumed
     </OnLeftClick>
    </commandbutton>
    <commandbutton name='Pause EVEBot' template='EVESkin.Window.TitleBar.PauseButton'>
     <X>47</X>
     <Y>0</Y>
     <Width>46</Width>
     <Height>20</Height>
     <OnLeftClick>
      EVE:Execute[CmdStopShip]
      Script[EVEBot]:Pause
      Script[EVEBot].VariableScope.EVEBot:Pause
      Echo EVEBot: Paused
     </OnLeftClick>
    </commandbutton>
    <text name='EVEBot_TitleBar_Title' template='EVESkin.Font.TitleBar'>
     <X>230</X>
     <Y>8</Y>
     <Width>170</Width>
     <Height>20</Height>
     <Text>vorcbot 20120916</Text>
    </text>
    <button Name='SaveSettings' template='EveSkin.Window.ClickButton'>
     <X>r73</X>
     <Y>2</Y>
     <Width>33</Width>
     <Height>16</Height>
     <text>save</text>
     <AutoTooltip>   save bot settings for current character</AutoTooltip>
     <OnLeftClick>
      Script[EVEBot].VariableScope.UI:UpdateConsole["saving settings..."]
      Script[EVEBot].VariableScope.Config:Save[]
      Script[EVEBot].VariableScope.Blacklist:Save[]
      Script[EVEBot].VariableScope.Whitelist:Save[]
      Script[EVEBot].VariableScope.UI:UpdateConsole["... settings saved"]
     </OnLeftClick>
    </button>
    <button Name='Minimize' template='EVESkin.Window.TitleBar.Minimize'>
     <X>r40</X>
     <Y>0</Y>
     <Width>20</Width>
     <Height>20</Height>
     <OnLeftClick>
      UIElement[EVEBot].FindUsableChild[TitleBotStatus,text]:Show
      UIElement[EVEBot].FindUsableChild[TitleBotStatusCap,text]:Show
      UIElement[EVEBot].FindUsableChild[TitleBotXPStatus,text]:Show
      UIElement[EVEBot].FindUsableChild[TitleBotXPCap,text]:Show
     </OnLeftClick>
    </button>
    <button Name='Maximize' template='EVESkin.Window.TitleBar.Minimize'>
     <X>r40</X>
     <Y>0</Y>
     <Width>20</Width>
     <Height>20</Height>
     <OnLeftClick>
      UIElement[EVEBot].FindUsableChild[TitleBotStatus,text]:Hide
      UIElement[EVEBot].FindUsableChild[TitleBotXPStatus,text]:Hide
      UIElement[EVEBot].FindUsableChild[TitleBotXPCap,text]:Hide
      UIElement[EVEBot].FindUsableChild[TitleBotStatusCap,text]:Hide
     </OnLeftClick>
    </button>
    <button Name='Close' template='EVESkin.Window.TitleBar.Close'>
     <X>r20</X>
     <Y>0</Y>
     <Width>20</Width>
     <Height>20</Height>
     <OnLeftClick>
      evebot_crashed:Set[FALSE]
      endscript EVEBot
     </OnLeftClick>
    </button>
   </Children>
  </TitleBar>


  <Children name="EVEBot_Children">
   <button Name='empty1' template='EVESkin.Window.Empty'>
   </button>
   <TabControl Name='EVEBotOptionsTab' template='EVESkin.TabControl'>
    <X>0</X>
    <Y>7</Y>
    <Width>100%</Width>
    <Height>100%</Height>
    <Tabs>
     <Tab Name='status'>
       <text name='script_runtime' template='EVESkin.Font.Description'>
        <X>100</X>
        <Y>7</Y>
        <Width>115</Width>
        <Height>20</Height>
        <Text>runtime:</Text>
       </text>
       <Text name='script_runtime_data' template='EVESkin.Font.Description'>
        <X>140</X>
        <Y>7</Y>
        <Width>100</Width>
        <Height>20</Height>
        <Text>${Script[EVEBot].VariableScope.UI.Runtime}</Text>
       </Text>
       <text name='state' template='EVESkin.Font.Description'>
        <X>10</X>
        <Y>7</Y>
        <Width>100</Width>
        <Height>20</Height>
        <Text>action:</Text>
       </text>
       <text name='state_data' template='EVESkin.Font.Description'>
        <X>40</X>
        <Y>7</Y>
        <Width>100</Width>
        <Height>20</Height>
        <text>${Script[EVEBot].VariableScope.Config.Common.BotModeName}</text>
       </text>
       <console Name="StatusConsole" template='EVESkin.Console'>
        <X>5</X>
        <Y>17</Y>
        <Width>491</Width>
        <Height>317</Height>
       </console>
     </Tab>

     <Tab Name='main'>
      <Text name='EVEBotModeLabel'>
       <X>10</X>
       <Y>20</Y>
       <Width>70</Width>
       <Height>10</Height>
       <Text>Bot Mode</Text>
      </Text>
      <combobox name='EVEBotMode'>
       <X>80</X>
       <Y>20</Y>
       <Width>250</Width>
       <Height>15</Height>
       <FullHeight>200</FullHeight>
       <ButtonWidth>18</ButtonWidth>
       <Items>
        <Item Value='1'>Ratter</Item>
        <Item Value='2'>Delegator</Item>
       </Items>
       <OnSelect>
        Script[EVEBot].VariableScope.Config.Common:SetBotMode[${This.SelectedItem.Value}]
        Script[EVEBot].VariableScope.Config.Common:SetBotModeName[${This.SelectedItem.Text}]
       </OnSelect>
       <OnLoad>
        This:SetSelection[${Script[EVEBot].VariableScope.Config.Common.BotMode}]
       </OnLoad>
      </combobox>
      <Textentry name='MinimumDronesInBay'>
       <X>10</X>
       <Y>50</Y>
       <Width>32</Width>
       <Height>18</Height>
       <MaxLength>2</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Common.DronesInBay}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Common:SetDronesInBay[${Int[${This.Text}]}]
        }
       </OnChange>
      </Textentry>
      <Text name='MinimumDronesInBayText'>
       <X>44</X>
       <Y>57</Y>
       <Width>200</Width>
       <Height>10</Height>
       <Text>Minimum Drones in Bay</Text>
       <AutoTooltip>This will set the amount of drones you want in your drone bay.</AutoTooltip>
      </Text>
      <checkbox Name='cbAutoLogin'>
       <X>10</X>
       <Y>80</Y>
       <Height>20</Height>
       <Width>100</Width>
       <Text>Auto Login</Text>
       <AutoTooltip>Auto Login when at Login window</AutoTooltip>
       <OnLoad>
        if ${Script[EVEBot].VariableScope.Config.Common.AutoLogin}
        {
         This:SetChecked
        }
       </OnLoad>
       <OnLeftClick>
         Script[EVEBot].VariableScope.Config.Common:SetAutoLogin[${This.Checked}]
       </OnLeftClick>
      </checkbox>
      <Text name='LoginNameText'>
       <X>10</X>
       <Y>102</Y>
       <Width>100</Width>
       <Height>18</Height>
       <Text>EVE Login</Text>
       <AutoTooltip>The EVE Login name for ${_Me.Name}</AutoTooltip>
      </Text>
      <Textentry name='LoginName'>
       <X>140</X>
       <Y>100</Y>
       <Width>100</Width>
       <Height>18</Height>
       <MaxLength>25</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Common.LoginName}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Common:SetLoginName[${This.Text}]
        }
       </OnChange>
      </Textentry>
      <Text name='LoginPasswordText'>
       <X>10</X>
       <Y>122</Y>
       <Width>100</Width>
       <Height>18</Height>
       <Text>EVE Password</Text>
       <AutoTooltip>The EVE Login Password for ${_Me.Name}</AutoTooltip>
      </Text>
      <Textentry name='LoginPassword'>
       <X>140</X>
       <Y>120</Y>
       <Width>100</Width>
       <Height>18</Height>
       <MaxLength>25</MaxLength>
       <PasswordCharacter>*</PasswordCharacter>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Common.LoginPassword}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Common:SetLoginPassword[${This.Text}]
        }
       </OnChange>
      </Textentry>

      <Text name='lblMaxRuntime'>
       <X>10</X>
       <Y>152</Y>
       <Width>130</Width>
       <Height>18</Height>
       <Text>Maximum Runtime</Text>
       <AutoTooltip>The maximum time to run the script before it aborts.</AutoTooltip>
      </Text>
      <Textentry name='tbMaxRuntime'>
       <X>140</X>
       <Y>150</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>5</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Common.MaxRuntime}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Common:SetMaxRuntime[${Int[${This.Text}]}]
        }
       </OnChange>
      </Textentry>

      <checkbox Name='cbUseSound'>
       <X>10</X>
       <Y>180</Y>
       <Height>20</Height>
       <Width>100</Width>
       <Text>Enable sound</Text>
       <AutoTooltip>Enable audio events</AutoTooltip>
       <OnLoad>
        if ${Script[EVEBot].VariableScope.Config.Common.UseSound}
        {
         This:SetChecked
        }
       </OnLoad>
       <OnLeftClick>
         Script[EVEBot].VariableScope.Config.Common:SetUseSound[${This.Checked}]
       </OnLeftClick>
      </checkbox>
      <checkbox Name='cbDisable3D'>
       <X>110</X>
       <Y>180</Y>
       <Height>20</Height>
       <Width>100</Width>
       <Text>Disable 3D Rendering</Text>
       <AutoTooltip>Disable EVE 3D Rendering</AutoTooltip>
       <OnLoad>
        if ${Script[EVEBot].VariableScope.Config.Common.Disable3D}
        {
         This:SetChecked
        }
       </OnLoad>
       <OnLeftClick>
         Script[EVEBot].VariableScope.Config.Common:SetDisable3D[${This.Checked}]
       </OnLeftClick>
      </checkbox>
     </Tab>



     <Tab name='combat'>
      <Text name='textOutsideOrbit'>
       <X>10</X>
       <Y>10</Y>
       <Height>10</Height>
       <Width>100</Width>
       <Text>outside orbit</Text>
       <AutoTooltip>delegator only: orbit distance in meters, when system safe</AutoTooltip>
      </Text>
      <Textentry name='teOutsideOrbit'>
       <X>90</X>
       <Y>10</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>40</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Combat.OutsideOrbit}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Combat:SetOutsideOrbit[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetOutsideOrbit["5000"]
        }
       </OnChange>
      </Textentry>
      <Text name='textInsideOrbit'>
       <X>10</X>
       <Y>30</Y>
       <Height>20</Height>
       <Width>100</Width>
       <Text>inside orbit</Text>
       <AutoTooltip>delegator only: orbit distance in meters, when system unsafe</AutoTooltip>
      </Text>
      <Textentry name='teInsideOrbit'>
       <X>90</X>
       <Y>30</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>40</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Combat.InsideOrbit}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Combat:SetInsideOrbit[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetInsideOrbit["3000"]
        }
       </OnChange>
      </Textentry>
      <Text name='textFleetMembersQty'>
       <X>10</X>
       <Y>50</Y>
       <Height>20</Height>
       <Width>100</Width>
       <Text>fleet qty</Text>
       <AutoTooltip>delegator only: fleet members qty without delegator himself</AutoTooltip>
      </Text>
      <Textentry name='teFleetQty'>
       <X>90</X>
       <Y>50</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>40</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Combat.FleetQty}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Combat:SetFleetQty[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetFleetQty["2"]
        }
       </OnChange>
      </Textentry>
      <Text name='textClickInterval'>
       <X>10</X>
       <Y>70</Y>
       <Height>20</Height>
       <Width>350</Width>
       <Text>click interval              plus random              seconds</Text>
       <AutoTooltip>delegator only: click to delegate interval</AutoTooltip>
      </Text>
      <combobox name='comboDelegatorClickInterval'>
       <X>80</X>
       <Y>70</Y>
       <Width>50</Width>
       <Height>15</Height>
       <FullHeight>200</FullHeight>
       <ButtonWidth>20</ButtonWidth>
       <Items>
        <Item Value='10'>10</Item>
        <Item Value='20'>20</Item>
        <Item Value='30'>30</Item>
        <Item Value='40'>40</Item>
        <Item Value='50'>50</Item>
        <Item Value='60'>60</Item>
       </Items>
       <OnSelect>
        Script[EVEBot].VariableScope.Config.Combat:SetDelegatorClickInterval[${This.SelectedItem.Value}]
       </OnSelect>
       <OnLoad>
        This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.DelegatorClickInterval}].ID}]
       </OnLoad>
      </combobox>
      <combobox name='comboDelegatorClickIntervalRandom'>
       <X>200</X>
       <Y>70</Y>
       <Width>50</Width>
       <Height>15</Height>
       <FullHeight>200</FullHeight>
       <ButtonWidth>20</ButtonWidth>
       <Items>
        <Item Value='10'>10</Item>
        <Item Value='20'>20</Item>
        <Item Value='30'>30</Item>
        <Item Value='40'>40</Item>
        <Item Value='50'>50</Item>
        <Item Value='60'>60</Item>
       </Items>
       <OnSelect>
        Script[EVEBot].VariableScope.Config.Combat:SetDelegatorClickIntervalRandom[${This.SelectedItem.Value}]
       </OnSelect>
       <OnLoad>
        This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.DelegatorClickIntervalRandom}].ID}]
       </OnLoad>
      </combobox>
      <checkbox name='cbScoopOnUnsafe'>
       <X>5</X>
       <Y>90</Y>
       <Height>20</Height>
       <Width>100</Width>
       <Text>scoop on unsafe</Text>
       <AutoTooltip>delegator only: if checked, bot will return all fighters to dronebay when system unsafe</AutoTooltip>
       <OnLoad>
        if ${Script[EVEBot].VariableScope.Config.Combat.ScoopOnUnsafe}
        {
         This:SetChecked
        }
       </OnLoad>
       <OnLeftClick>
        Script[EVEBot].VariableScope.Config.Combat:SetScoopOnUnsafe[${This.Checked}]
       </OnLeftClick>
      </checkbox>
<!--
не знаю зачем эта хуйня, вроде и без неё всё работает.
      <Frame name='frmDefenceOptions'>
       <X>5</X>
       <Y>5</Y>
       <Height>195</Height>
       <Width>49%</Width>
       <Border>1</Border>
       <Children>
       </Children>
      </Frame>

      <Frame name='frmRunOptions'>
       <X>50%</X>
       <Y>5</Y>
       <Height>195</Height>
       <Width>49%</Width>
       <Border>1</Border>
       <Children>
       </Children>
      </Frame>
-->
      <Frame name='frmRatter'>
       <X>5</X>
       <Y>205</Y>
       <Height>123</Height>
       <Width>98%</Width>
       <Border>1</Border>
       <Children>
        <Text name='OrbitRangeLabel'>
         <X>10</X>
         <Y>10</Y>
         <Width>200</Width>
         <Height>10</Height>
         <Text>Ratter Ship:</Text>
         <AutoTooltip>Installation of the orbit for the ships</AutoTooltip>
        </Text>
        <combobox name='MyOrbitRange'>
         <X>120</X>
         <Y>8</Y>
         <Width>115</Width>
         <Height>15</Height>
         <FullHeight>60</FullHeight>
         <ButtonWidth>18</ButtonWidth>
         <Items>
          <Item Value='1'>Missales</Item>
          <Item Value='2'>Vagabond</Item>
          <Item Value='3'>Zealot</Item>
         </Items>
         <OnSelect>
          Script[EVEBot].VariableScope.Config.Combat:SetMyOrbitRange[${This.SelectedItem.Value}]
         </OnSelect>
         <OnLoad>
          This:SetSelection[${Script[EVEBot].VariableScope.Config.Combat.MyOrbitRange}]
         </OnLoad>
        </combobox>


        <checkbox name='cbDeactivateMWD'>
         <X>10</X>
         <Y>30</Y>
         <Height>20</Height>
         <Width>100</Width>
         <Text>Disable MWD in orbit</Text>
         <AutoTooltip>If checked, use disable MWD.</AutoTooltip>
         <OnLoad>
          if ${Script[EVEBot].VariableScope.Config.Combat.DeactivateMWD}
          {
           This:SetChecked
          }
         </OnLoad>
         <OnLeftClick>
          Script[EVEBot].VariableScope.Config.Combat:SetDeactivateMWD[${This.Checked}]
         </OnLeftClick>
        </checkbox>

        <checkbox name='cbFullDeactivateOrbit'>
         <X>10</X>
         <Y>50</Y>
         <Height>20</Height>
         <Width>100</Width>
         <Text>Full disable fly orbit</Text>
         <AutoTooltip>If checked, use disable orbit fly.</AutoTooltip>
         <OnLoad>
          if ${Script[EVEBot].VariableScope.Config.Combat.FullDeactivateOrbit}
          {
           This:SetChecked
          }
         </OnLoad>
         <OnLeftClick>
          Script[EVEBot].VariableScope.Config.Combat:SetFullDeactivateOrbit[${This.Checked}]
         </OnLeftClick>
        </checkbox>


        <checkbox name='cbLaunchCombatDrones'>
         <X>10</X>
         <Y>70</Y>
         <Height>20</Height>
         <Width>130</Width>
         <Text>Launch Drones for any targets</Text>
         <AutoTooltip>Launch and Use Combat Drones</AutoTooltip>
         <OnLoad>
          if ${Script[EVEBot].VariableScope.Config.Combat.LaunchCombatDrones}
          {
           This:SetChecked
          }
         </OnLoad>
         <OnLeftClick>
          Script[EVEBot].VariableScope.Config.Combat:SetLaunchCombatDrones[${This.Checked}]
         </OnLeftClick>
        </checkbox>

        <checkbox name='cbLaunchDronesSpec'>
         <X>28</X>
         <Y>90</Y>
         <Height>20</Height>
         <Width>130</Width>
         <Text>Combat Drones for Spec Targets</Text>
         <AutoTooltip>Launch and Use Combat Drones ONLY FOR SPECIAL TARGETs!</AutoTooltip>
         <OnLoad>
          if ${Script[EVEBot].VariableScope.Config.Combat.LaunchDronesSpec}
          {
           This:SetChecked
          }
         </OnLoad>
         <OnLeftClick>
          Script[EVEBot].VariableScope.Config.Combat:SetLaunchDronesSpec[${This.Checked}]
         </OnLeftClick>
        </checkbox>

        <checkbox name='cbChainSpawns'>
         <X>260</X>
         <Y>10</Y>
         <Height>20</Height>
         <Width>100</Width>
         <Text>Chain Spawns</Text>
         <AutoTooltip>Will chain high value spawns if checked</AutoTooltip>
         <OnLoad>
          if ${Script[EVEBot].VariableScope.Config.Combat.ChainSpawns}
          {
           This:SetChecked
          }
         </OnLoad>
         <OnLeftClick>
           Script[EVEBot].VariableScope.Config.Combat:SetChainSpawns[${This.Checked}]
         </OnLeftClick>
        </checkbox>
        <checkbox name='cbChainSolo'>
         <X>260</X>
         <Y>30</Y>
         <Height>20</Height>
         <Width>100</Width>
         <Text>Chain Spawns (while alone)</Text>
         <AutoTooltip>If not checked chaining will be suspended if you are alone in a system.</AutoTooltip>
         <OnLoad>
          if ${Script[EVEBot].VariableScope.Config.Combat.ChainSolo}
          {
           This:SetChecked
          }
         </OnLoad>
         <OnLeftClick>
           Script[EVEBot].VariableScope.Config.Combat:SetChainSolo[${This.Checked}]
         </OnLeftClick>
        </checkbox>
        <Text name='lblMinChainBounty'>
         <X>260</X>
         <Y>55</Y>
         <Width>200</Width>
         <Height>18</Height>
         <Text>Min.Chain Bounty:</Text>
         <AutoTooltip>NPC ships with a bounty above this value will be chained (if enabled).</AutoTooltip>
        </Text>
        <Textentry name='tbMinChainBounty'>
         <X>390</X>
         <Y>53</Y>
         <Width>90</Width>
         <Height>18</Height>
         <MaxLength>10</MaxLength>
         <OnLoad>
          This:SetText[${Script[EVEBot].VariableScope.Config.Combat.MinChainBounty}]
         </OnLoad>
         <OnChange>
          if ${This.Text.Length} > 0
          {
           Script[EVEBot].VariableScope.Config.Combat:SetMinChainBounty[${Int[${This.Text}]}]
          }
         </OnChange>
        </Textentry>

        <Textentry name='MinimumDronesInSpace'>
         <X>260</X>
         <Y>90</Y>
         <Width>30</Width>
         <Height>18</Height>
         <MaxLength>2</MaxLength>
         <OnLoad>
          This:SetText[${Script[EVEBot].VariableScope.Config.Combat.MinimumDronesInSpace}]
         </OnLoad>
         <OnChange>
          if ${This.Text.Length} > 0
          {
           Script[EVEBot].VariableScope.Config.Combat:SetMinimumDronesInSpace[${Int[${This.Text}]}]
          }
         </OnChange>
        </Textentry>

        <Text name='MinimumDronesInSpaceText'>
         <X>294</X>
         <Y>92</Y>
         <Width>200</Width>
         <Height>10</Height>
         <Text>Minimum Drones in Space</Text>
         <AutoTooltip>We will return to base when available drones falls below this number</AutoTooltip>
        </Text>

       </Children>
      </Frame>
     </Tab>





     <tab name='labels'>

      <Text name='Label1'>
       <X>10</X>
       <Y>10</Y>
       <Width>150</Width>
       <Height>10</Height>
       <Text>bookmark prefixes:</Text>
      </Text>
<!-- safe spots prefix -->
      <Text name='SafeSpotsLabel'>
       <X>15</X>
       <Y>28</Y>
       <Width>200</Width>
       <Height>10</Height>
       <Text>safe spot:</Text>
       <AutoTooltip>The prefix for safe spot bookmark names.</AutoTooltip>
      </Text>
      <Textentry name='SafeSpotPrefix'>
       <X>100</X>
       <Y>25</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Labels.SafeSpotPrefix}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Labels:SetSafeSpotPrefix[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Labels:SetSafeSpotPrefix[""]
        }
       </OnChange>
      </Textentry>

<!-- ammo label -->
      <Text name='AmmoLabel'>
       <X>15</X>
       <Y>48</Y>
       <Width>200</Width>
       <Height>10</Height>
       <Text>ammo spot:</Text>
       <AutoTooltip>The name for ammo spot bookmark.</AutoTooltip>
      </Text>
      <Textentry name='AmmoSpot'>
       <X>100</X>
       <Y>45</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Labels.AmmoSpot}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Labels:SetAmmoSpot[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Labels:SetAmmoSpot[""]
        }
       </OnChange>
      </Textentry>

<!-- anomalies list -->
      <Text name='Label2'>
       <X>10</X>
       <Y>72</Y>
       <Width>200</Width>
       <Height>10</Height>
       <Text>allowed anomalies list:</Text>
      </Text>
      <TextEntry name='tbAddAllowedAnomaly'>
       <X>10</X>
       <Y>85</Y>
       <Width>220</Width>
       <Height>18</Height>
       <MaxLength>50</MaxLength>
      </TextEntry>
      <button Name='AddAllowedAnomaly' template='EVEskin.Add.Texture'>
       <X>232</X>
       <Y>86</Y>
       <Width>16</Width>
       <Height>16</Height>
       <OnLeftClick>
        if !${Script[EVEBot].VariableScope.Config.AllowedAnomalies.IsListed[${UIElement[tbAddAllowedAnomaly@Labels@EVEBotOptionsTab@EVEBot].Text}]}
         UIElement[AllowedAnomalies@Labels@EVEBotOptionsTab@EVEBot]:AddItem[${UIElement[tbAddAllowedAnomaly@Labels@EVEBotOptionsTab@EVEBot].Text}]
        Script[EVEBot].VariableScope.Config.AllowedAnomalies:AddAllowedAnomaly[${UIElement[tbAddAllowedAnomaly@Labels@EVEBotOptionsTab@EVEBot].Text}]
        UIElement[tbAddAllowedAnomaly@Labels@EVEBotOptionsTab@EVEBot]:SetText[]
       </OnLeftClick>
      </button>
      <button Name='RemoveAllowedAnomaly' template='EVEskin.Remove.Texture'>
       <X>250</X>
       <Y>86</Y>
       <Width>16</Width>
       <Height>16</Height>
       <OnLeftClick>
        UIElement[AllowedAnomalies@Labels@EVEBotOptionsTab@EVEBot].ItemByText[${UIElement[tbAddAllowedAnomaly@Labels@EVEBotOptionsTab@EVEBot].Text}]:Remove
        Script[EVEBot].VariableScope.Config.AllowedAnomalies:RemoveAllowedAnomaly[${UIElement[tbAddAllowedAnomaly@Labels@EVEBotOptionsTab@EVEBot].Text}]
       </OnLeftClick>
      </button>
      <listbox Name='AllowedAnomalies'>
       <X>10</X>
       <Y>105</Y>
       <Width>256</Width>
       <Height>130</Height>
       <SelectMultiple>0</SelectMultiple>
       <Sort>Text</Sort>
       <AutoTooltip>Allowed anomalies list. All other will be ignored.</AutoTooltip>
       <OnLoad>
        Script[EVEBot].VariableScope.Config.AllowedAnomalies:RefreshAllowedAnomalies
        variable iterator InfoFromSettings
        Script[EVEBot].VariableScope.Config.AllowedAnomalies.AllowedAnomalyNames:GetIterator[InfoFromSettings]
        if ${InfoFromSettings:First(exists)}
        {
         do
         {
          This:AddItem[${InfoFromSettings.Value.Name}]
         }
         while ${InfoFromSettings:Next(exists)}
        }
       </OnLoad>
       <OnSelect>
        UIElement[tbAddAllowedAnomaly@Labels@EVEBotOptionsTab@EVEBot]:SetText[${This.SelectedItem.Text}]
       </OnSelect>
      </listbox>


<!--
      <Text name='Mark300'>
       <X>25</X>
       <Y>65</Y>
       <Width>600</Width>
       <Height>10</Height>
       <Text>------------------------------------------------------</Text>
      </Text>

      <Text name='Label11'>
       <X>10</X>
       <Y>85</Y>
       <Width>200</Width>
       <Height>10</Height>
       <Text>Ratter Preference</Text>
      </Text>

      <Text name='RatterPointsLabel'>
       <X>25</X>
       <Y>108</Y>
       <Width>200</Width>
       <Height>10</Height>
       <Text>Book prefix:</Text>
       <AutoTooltip>The books prefix for Ratter mode.</AutoTooltip>
      </Text>

      <Textentry name='RatterPointsPrefix'>
       <X>130</X>
       <Y>105</Y>
       <Width>170</Width>
       <Height>18</Height>
       <MaxLength>20</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Labels.RatterPointsPrefix}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Labels:SetRatterPointsPrefix[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Labels:SetRatterPointsPrefix[""]
        }
       </OnChange>
      </Textentry>

      <checkbox name='cbRatterUseMyBook'>
        <X>330</X>
        <Y>105</Y>
        <Height>20</Height>
        <Width>100</Width>
        <Text>Ratter use my Bookmarks</text>
        <AutoTooltip>If checked, use a point in my book.</AutoTooltip>
        <OnLoad>
         if ${Script[EVEBot].VariableScope.Config.Labels.RatterUseMyBook}
         {
          This:SetChecked
         }
        </OnLoad>
        <OnLeftClick>
          Script[EVEBot].VariableScope.Config.Labels:SetRatterUseMyBook[${This.Checked}]
        </OnLeftClick>
      </checkbox>

      <Text name='Mark400'>
       <X>25</X>
       <Y>135</Y>
       <Width>600</Width>
       <Height>10</Height>
       <Text>------------------------------------------------------</Text>
      </Text>


      <Text name='Label200'>
       <X>10</X>
       <Y>160</Y>
       <Width>200</Width>
       <Height>10</Height>
       <Text>Bomzh Preferences</Text>
      </Text>

      <Text name='LootLabel'>
       <X>25</X>
       <Y>183</Y>
       <Width>200</Width>
       <Height>10</Height>
       <Text>Loots prefix</Text>
       <AutoTooltip>The prefix for looting points.</AutoTooltip>
      </Text>
      <Textentry name='LootPrefix'>
       <X>130</X>
       <Y>182</Y>
       <Width>100</Width>
       <Height>18</Height>
       <MaxLength>20</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Labels.LootPrefix}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Labels:SetLootPrefix[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Labels:SetLootPrefix[""]
        }
       </OnChange>
      </Textentry>

      <checkbox name='cbWreckSalvage'>
        <X>25</X>
        <Y>203</Y>
        <Height>20</Height>
        <Width>100</Width>
        <Text>Run Salvage Wrecks</text>
        <AutoTooltip>If checked, run salvage wrecks.</AutoTooltip>
        <OnLoad>
         if ${Script[EVEBot].VariableScope.Config.Labels.WreckSalvage}
         {
          This:SetChecked
         }
        </OnLoad>
        <OnLeftClick>
          Script[EVEBot].VariableScope.Config.Labels:SetWreckSalvage[${This.Checked}]
        </OnLeftClick>
      </checkbox>

      <Text name='LootSizeWreckLabel'>
       <X>260</X>
       <Y>183</Y>
       <Width>200</Width>
       <Height>10</Height>
       <Text>Loot Size:</Text>
       <AutoTooltip>Installation size of loot wrecks</AutoTooltip>
      </Text>

      <combobox name='LootSizeWreck'>
       <X>365</X>
       <Y>183</Y>
       <Width>120</Width>
       <Height>15</Height>
       <FullHeight>60</FullHeight>
       <ButtonWidth>18</ButtonWidth>
       <Items>
        <Item Value='1'>Large</Item>
        <Item Value='2'>Large+Medium</Item>
        <Item Value='3'>Full</Item>
       </Items>
       <OnSelect>
        Script[EVEBot].VariableScope.Config.Labels:SetLootSizeWreck[${This.SelectedItem.Value}]
       </OnSelect>
       <OnLoad>
        This:SetSelection[${Script[EVEBot].VariableScope.Config.Labels.LootSizeWreck}]
       </OnLoad>
      </combobox>

      <Text name='SalvageWreckLabel'>
       <X>260</X>
       <Y>206</Y>
       <Width>200</Width>
       <Height>10</Height>
       <Text>Salvage Size:</Text>
       <AutoTooltip>Installation size of salvage wrecks</AutoTooltip>
      </Text>

      <combobox name='SalvageSizeWreck'>
       <X>365</X>
       <Y>205</Y>
       <Width>120</Width>
       <Height>15</Height>
       <FullHeight>60</FullHeight>
       <ButtonWidth>18</ButtonWidth>
       <Items>
        <Item Value='1'>Large</Item>
        <Item Value='2'>Large+Medium</Item>
        <Item Value='3'>Full</Item>
       </Items>
       <OnSelect>
        Script[EVEBot].VariableScope.Config.Labels:SetSalvageSizeWreck[${This.SelectedItem.Value}]
       </OnSelect>
       <OnLoad>
        This:SetSelection[${Script[EVEBot].VariableScope.Config.Labels.SalvageSizeWreck}]
       </OnLoad>
      </combobox>


      <Text name='Mark500'>
       <X>25</X>
       <Y>225</Y>
       <Width>600</Width>
       <Height>10</Height>
       <Text>------------------------------------------------------</Text>
      </Text>
-->
     </tab>







;_____________________________________________________________________________________________________ TAB  COORDS   --=START=--________________________________________________________________________
     <tab name='cords'>
      <Text name='Coordstitle'>
       <X>10</X>
       <Y>10</Y>
       <Width>450</Width>
       <Height>10</Height>
       <Text>${Mouse}      COORDINATES OF SCANNER BUTTONS </Text>
      </Text>

      <Text name='Scanbutton'>
       <X>10</X>
       <Y>40</Y>
       <Width>100</Width>
       <Height>10</Height>
       <Text>Scan</Text>
       <AutoTooltip>      X : Y coordinates of SCAN button in scanner</AutoTooltip>
      </Text>
      <Textentry name='scanbuttonX'>
       <X>70</X>
       <Y>40</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.ScanX}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetScanX[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetScanX["0"]
        }
       </OnChange>




      </Textentry>
      <Textentry name='scanbuttonY'>
       <X>115</X>
       <Y>40</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.ScanY}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetScanY[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetScanY["0"]
        }
       </OnChange>
      </Textentry>



      <Text name='Recoverbutton'>
       <X>10</X>
       <Y>60</Y>
       <Width>100</Width>
       <Height>10</Height>
       <Text>drones</Text>
       <AutoTooltip>      X : Y coordinates of drones in space folder</AutoTooltip>
      </Text>
      <Textentry name='RecoverbuttonX'>
       <X>70</X>
       <Y>60</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.RecoverX}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetRecoverX[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetRecoverX["0"]
        }
       </OnChange>
      </Textentry>
      <Textentry name='RecoverbuttonY'>
       <X>115</X>
       <Y>60</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
       This:SetText[${Script[EVEBot].VariableScope.Config.Coords.RecoverY}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetRecoverY[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetRecoverY["0"]
        }
       </OnChange>
      </Textentry>




      <Text name='Reconnectbutton'>
       <X>10</X>
       <Y>80</Y>
       <Width>100</Width>
       <Height>10</Height>
       <Text>Page</Text>
       <AutoTooltip>X : Y coordinates of SYSTEM SCANNER page in scanner window</AutoTooltip>
      </Text>
      <Textentry name='ReconnectbuttonX'>
       <X>70</X>
       <Y>80</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
      <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.ReConX}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetReConX[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetReConX["0"]
        }
       </OnChange>
      </Textentry>
      <Textentry name='ReconnectbuttonY'>
       <X>115</X>
       <Y>80</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.ReConY}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetReConY[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetReConY["0"]
        }
       </OnChange>
      </Textentry>


      <Text name='FirstProbebutton'>
       <X>160</X>
       <Y>40</Y>
       <Width>100</Width>
       <Height>10</Height>
       <Text>ship maint arr</Text>
       <AutoTooltip>      X : Y coordinates of ship maintenance array</AutoTooltip>
      </Text>
      <Textentry name='FirstProbebuttonX'>
       <X>240</X>
       <Y>40</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.1stProbeX}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:Set1stProbeX[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:Set1stProbeX["0"]
        }
       </OnChange>
      </Textentry>
      <Textentry name='FirstProbebuttonY'>
       <X>285</X>
       <Y>40</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.1stProbeY}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:Set1stProbeY[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:Set1stProbeY["0"]
        }
       </OnChange>
      </Textentry>




      <Text name='FirstResultbutton'>
       <X>160</X>
       <Y>60</Y>
       <Width>100</Width>
       <Height>10</Height>
       <Text>1st Result</Text>
       <AutoTooltip>      X : Y coordinates of 1st RESULT LINE in scanner</AutoTooltip>
      </Text>
      <Textentry name='FirstResultbuttonX'>
       <X>240</X>
       <Y>60</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.1stResultX}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:Set1stResultX[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:Set1stResultX["0"]
        }
       </OnChange>
      </Textentry>
      <Textentry name='FirstResultbuttonY'>
       <X>285</X>
       <Y>60</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.1stResultY}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:Set1stResultY[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:Set1stResultY["0"]
        }
       </OnChange>
      </Textentry>

      <Text name='ProbeLauncherbutton'>
       <X>160</X>
       <Y>80</Y>
       <Width>110</Width>
       <Height>10</Height>
       <Text>ProbeLauncher</Text>
       <AutoTooltip>      ProbeLauncherHotKey (F1-F8)</AutoTooltip>
      </Text>
      <Textentry name='ProbeLauncherbuttonX'>
       <X>270</X>
       <Y>80</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.ProbeLauncher}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetProbeLauncher[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetProbeLauncher["F8"]
        }
       </OnChange>
      </Textentry>




      <Text name='MouseDelay2'>
       <X>330</X>
       <Y>40</Y>
       <Width>115</Width>
       <Height>10</Height>
       <Text>MouseDelay(MS)</Text>
       <AutoTooltip>      Delay between mouse move and clicks (in MSec)</AutoTooltip>
      </Text>
      <Textentry name='MouseDelay'>
       <X>450</X>
       <Y>40</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.MouseDelay}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetMouseDelay[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetMouseDelay["1"]
        }
       </OnChange>
      </Textentry>







      <Text name='AnalyzeTime2'>
       <X>310</X>
       <Y>80</Y>
       <Width>135</Width>
       <Height>10</Height>
       <Text>AnalyzingTime(MS)</Text>
       <AutoTooltip>      Scanner AnalyzingTime  (in MSec)</AutoTooltip>
      </Text>
      <Textentry name='AnalyzeTime'>
       <X>450</X>
       <Y>80</Y>
       <Width>40</Width>
       <Height>18</Height>
       <MaxLength>10</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.AnalyzeTime}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetAnalyzeTime[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetAnalyzeTime["300"]
        }
       </OnChange>
      </Textentry>









      <Text name='AnomalyName'>
       <X>10</X>
       <Y>120</Y>
       <Width>100</Width>
       <Height>10</Height>
       <Text>AnomalyNAME</Text>
       <AutoTooltip>      Anomaly NAME to Do</AutoTooltip>
      </Text>
      <Textentry name='AnomalyNameX'>
       <X>120</X>
       <Y>120</Y>
       <Width>370</Width>
       <Height>18</Height>
       <MaxLength>40</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.AnomalyName}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetAnomalyName[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetAnomalyName["Type Name Here"]
        }
       </OnChange>
      </Textentry>








       <Text name='WarpRange2'>
       <X>10</X>
       <Y>140</Y>
       <Width>100</Width>
       <Height>10</Height>
       <Text>WarpRange</Text>
       <AutoTooltip>      Warp Range to Plex</AutoTooltip>
      </Text>
      <Textentry name='WarpRange'>
       <X>120</X>
       <Y>140</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>40</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.WarpRange}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetWarpRange[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetWarpRange["0"]
        }
       </OnChange>
      </Textentry>

      <checkbox name='cbOrbitAnomaly'>
       <X>200</X>
       <Y>140</Y>
       <Height>20</Height>
       <Width>100</Width>
       <Text>Orbiting</Text>
       <AutoTooltip>   Orbit Center of Anomaly?</AutoTooltip>
       <OnLoad>
        if ${Script[EVEBot].VariableScope.Config.Coords.OrbitAnomaly}
        {
         This:SetChecked
        }
       </OnLoad>
       <OnLeftClick>
         Script[EVEBot].VariableScope.Config.Coords:SetOrbitAnomaly[${This.Checked}]
       </OnLeftClick>
      </checkbox>
      <Text name='OrbitDistance2'>
       <X>265</X>
       <Y>140</Y>
       <Width>110</Width>
       <Height>10</Height>
       <Text>OrbitDistance</Text>
       <AutoTooltip>      Orbit Distance in Plex</AutoTooltip>
      </Text>
      <Textentry name='OrbitDistance'>
       <X>375</X>
       <Y>140</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>40</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.OrbitDistance}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetOrbitDistance[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetOrbitDistance["130000"]
        }
       </OnChange>
      </Textentry>

      <checkbox name='cbAmmoReload'>
       <X>100</X>
       <Y>100</Y>
       <Height>20</Height>
       <Width>100</Width>
       <Text>AmmoReload</Text>
       <AutoTooltip>   Relaod ammo from POS?</AutoTooltip>
       <OnLoad>
        if ${Script[EVEBot].VariableScope.Config.Coords.AmmoReload}
        {
         This:SetChecked
        }
       </OnLoad>
       <OnLeftClick>
         Script[EVEBot].VariableScope.Config.Coords:SetAmmoReload[${This.Checked}]
       </OnLeftClick>
      </checkbox>
      <Textentry name='AmmoReloadValue'>
       <X>210</X>
       <Y>100</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>40</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.AmmoReloadValue}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetAmmoReloadValue[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetAmmoReloadValue["1000"]
        }
       </OnChange>
      </Textentry>

      <checkbox name='cbSupport'>
       <X>5</X>
       <Y>160</Y>
       <Height>20</Height>
       <Width>50</Width>
       <Text>Support?</Text>
       <AutoTooltip>   Work As Support</AutoTooltip>
       <OnLoad>
        if ${Script[EVEBot].VariableScope.Config.Coords.Support}
        {
         This:SetChecked
        }
       </OnLoad>
       <OnLeftClick>
         Script[EVEBot].VariableScope.Config.Coords:SetSupport[${This.Checked}]
       </OnLeftClick>
      </checkbox>


      <Textentry name='PilotToSupport'>
       <X>80</X>
       <Y>160</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>40</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.PilotToSupport}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetPilotToSupport[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetPilotToSupport[""]
        }
       </OnChange>
      </Textentry>

      <checkbox name='Sanctum1'>
       <X>5</X>
       <Y>180</Y>
       <Height>20</Height>
       <Width>50</Width>
       <Text>Station</Text>
       <AutoTooltip>  Do Sanctum With Station</AutoTooltip>
       <OnLoad>
        if ${Script[EVEBot].VariableScope.Config.Coords.Sanctum1}
        {
         This:SetChecked
        }
       </OnLoad>
       <OnLeftClick>
         Script[EVEBot].VariableScope.Config.Coords:SetSanctum1[${This.Checked}]
       </OnLeftClick>
      </checkbox>

      <checkbox name='Sanctum2'>
       <X>5</X>
       <Y>200</Y>
       <Height>20</Height>
       <Width>50</Width>
       <Text>Rings</Text>
       <AutoTooltip>  Do Sanctum With Rings</AutoTooltip>
       <OnLoad>
        if ${Script[EVEBot].VariableScope.Config.Coords.Sanctum2}
        {
         This:SetChecked
        }
       </OnLoad>
       <OnLeftClick>
         Script[EVEBot].VariableScope.Config.Coords:SetSanctum2[${This.Checked}]
       </OnLeftClick>
      </checkbox>

      <Text name='WaitBeforeScanText'>
       <X>100</X>
       <Y>180</Y>
       <Width>110</Width>
       <Height>10</Height>
       <Text>WaitBeforeScan</Text>
       <AutoTooltip>      WaitBeforeScan</AutoTooltip>
      </Text>

      <Textentry name='WaitBeforeScan'>
       <X>100</X>
       <Y>200</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>40</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.WaitBeforeScan}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetWaitBeforeScan[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetWaitBeforeScan["0"]
        }
       </OnChange>
      </Textentry>




      <Text name='SmartBombText'>
       <X>220</X>
       <Y>180</Y>
       <Width>110</Width>
       <Height>10</Height>
       <Text>SmartBomb</Text>
       <AutoTooltip>      SB activation range</AutoTooltip>
      </Text>

      <Textentry name='SmartBombRange'>
       <X>220</X>
       <Y>200</Y>
       <Width>80</Width>
       <Height>18</Height>
       <MaxLength>40</MaxLength>
       <OnLoad>
        This:SetText[${Script[EVEBot].VariableScope.Config.Coords.SmartBombRange}]
       </OnLoad>
       <OnChange>
        if ${This.Text.Length} > 0
        {
         Script[EVEBot].VariableScope.Config.Coords:SetSmartBombRange[${This.Text}]
        }
        else
        {
         Script[EVEBot].VariableScope.Config.Coords:SetSmartBombRange["0"]
        }
       </OnChange>
      </Textentry>

     </tab>
;-------------------------TAB COORDS  --= END =-- ---------------------------



     <Tab name='fleeing'>
      <TabControl Name='FleeingTabcontrol' template='EVESkin.TabControl'>
       <x>0</x>
       <y>0</y>
       <width>100%</width>
       <height>100%</height>
       <Tabs>
        <Tab name='options'>
         <frame name='FleeingFrame'>
          <x>0</x>
          <y>0</y>
          <width>100%</width>
          <height>100%</height>
          <children>
           <checkbox name='cbRunOnLowAmmo'>
            <X>10</X>
            <Y>10</Y>
            <Height>20</Height>
            <Width>100</Width>
            <Text>run on low ammo</Text>
            <AutoTooltip>If checked, run to safe spot when low on ammo.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.RunOnLowAmmo}
             {
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetRunOnLowAmmo[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbRunOnLowCap'>
            <X>10</X>
            <Y>30</Y>
            <Height>20</Height>
            <Width>100</Width>
            <Text>run on low cap</Text>
            <AutoTooltip>If checked, run to safe spot when capacitor is empty.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.RunOnLowCap}
             {
             This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetRunOnLowCap[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbRunOnLowTank'>
            <X>10</X>
            <Y>50</Y>
            <Height>20</Height>
            <Width>100</Width>
            <Text>run on low tank</Text>
            <AutoTooltip>If checked, run to safe spot when tank (shield or armor) has failed.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.RunOnLowTank}
             {
             This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetRunOnLowTank[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbRunToStation'>
            <X>10</X>
            <Y>70</Y>
            <Height>20</Height>
            <Width>100</Width>
            <Text>run to station</Text>
            <AutoTooltip>If checked, run to a station instead of a safe-spot.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.RunToStation}
             {
             This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetRunToStation[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbUseBlackList'>
            <X>10</X>
            <Y>90</Y>
            <Height>20</Height>
            <Width>100</Width>
            <Text>use blacklist</Text>
            <AutoTooltip>If checked, run to safe spot when any blacklisted pilot enters system.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.UseBlackList}
             {
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetUseBlackList[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbUseWhiteList'>
            <X>10</X>
            <Y>110</Y>
            <Height>20</Height>
            <Width>100</Width>
            <Text>use whitelist</Text>
            <AutoTooltip>If checked, run to safe spot when any non-whitelisted pilot enters system.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.UseWhiteList}
             {
              UIElement[EVEBot].FindUsableChild[cbUseStandings,checkbox]:UnsetChecked
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             if ${This.Checked}
             {
              UIElement[EVEBot].FindUsableChild[cbUseStandings,checkbox]:UnsetChecked
              Script[EVEBot].VariableScope.Config.Combat:SetUseStandings[!${This.Checked}]
             }
             Script[EVEBot].VariableScope.Config.Combat:SetUseWhiteList[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbUseStandings'>
            <X>10</X>
            <Y>130</Y>
            <Height>20</Height>
            <Width>100</Width>
            <Text>use standings</Text>
            <AutoTooltip>If checked, run to safe spot when pilot with standing zero or lower enters system.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.UseStandings}
             {
              UIElement[EVEBot].FindUsableChild[cbUseWhiteList,checkbox]:UnsetChecked
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             if ${This.Checked}
             {
              UIElement[EVEBot].FindUsableChild[cbUseWhiteList,checkbox]:UnsetChecked
              Script[EVEBot].VariableScope.Config.Combat:SetUseWhiteList[!${This.Checked}]
             }
             Script[EVEBot].VariableScope.Config.Combat:SetUseStandings[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <slider name='MinArmorPctFlee'>
            <X>130</X>
            <Y>30</Y>
            <Width>110</Width>
            <Height>18</Height>
            <Range>100</Range>
            <OnLoad>
             This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.MinimumArmorPct}]
             UIElement[EVEBot].FindUsableChild[MinArmorPctLabelFlee,Text]:SetText["minimum armor: ${This.Value}"]
            </OnLoad>
            <OnChange>
             Script[EVEBot].VariableScope.Config.Combat:SetMinimumArmorPct[${Int[${This.Value}]}]
             UIElement[EVEBot].FindUsableChild[MinArmorPctLabelFlee,Text]:SetText["minimum armor: ${This.Value}"]
            </OnChange>
           </slider>
           <Text name='MinArmorPctLabelFlee'>
            <X>250</X>
            <Y>30</Y>
            <Width>150</Width>
            <Height>10</Height>
            <Text>Minimum Armor: 0</Text>
            <AutoTooltip>lowest armor percent allowed before fleeing</AutoTooltip>
            <OnLoad>
             This:SetText["minimum armor: ${UIElement[EVEBot].FindUsableChild[MinArmorPctFlee,slider].Value}"]
            </OnLoad>
           </Text>
           <slider name='MinShieldPctFlee'>
            <X>130</X>
            <Y>10</Y>
            <Width>110</Width>
            <Height>18</Height>
            <Range>100</Range>
            <OnLoad>
             This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.MinimumShieldPct}]
             UIElement[EVEBot].FindUsableChild[MinShieldPctLabelFlee,Text]:SetText["minimum shield: ${This.Value}"]
            </OnLoad>
            <OnChange>
             Script[EVEBot].VariableScope.Config.Combat:SetMinimumShieldPct[${Int[${This.Value}]}]
             UIElement[EVEBot].FindUsableChild[MinShieldPctLabelFlee,Text]:SetText["minimum shield: ${This.Value}"]
            </OnChange>
           </slider>
           <Text name='MinShieldPctLabelFlee'>
            <X>250</X>
            <Y>10</Y>
            <Width>150</Width>
            <Height>10</Height>
            <Text>minimum shield: 0</Text>
            <AutoTooltip>lowest shield percent allowed before fleeing</AutoTooltip>
            <OnLoad>
             This:SetText["minimum shield: ${UIElement[EVEBot].FindUsableChild[MinShieldPctFlee,slider].Value}"]
            </OnLoad>
           </Text>
           <slider name='MinCapPctFlee'>
            <X>130</X>
            <Y>50</Y>
            <Width>110</Width>
            <Height>18</Height>
            <Range>100</Range>
            <OnLoad>
             This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.MinimumCapPct}]
             UIElement[EVEBot].FindUsableChild[MinCapPctLabelFlee,Text]:SetText["minimum cap: ${This.Value}"]
            </OnLoad>
            <OnChange>
             Script[EVEBot].VariableScope.Config.Combat:SetMinimumCapPct[${Int[${This.Value}]}]
             UIElement[EVEBot].FindUsableChild[MinCapPctLabelFlee,Text]:SetText["minimum cap: ${This.Value}"]
            </OnChange>
           </slider>
           <Text name='MinCapPctLabelFlee'>
            <X>250</X>
            <Y>50</Y>
            <Width>150</Width>
            <Height>10</Height>
            <Text>minimum cap: 0</Text>
            <AutoTooltip>lowest capacitor percent allowed before fleeing</AutoTooltip>
            <OnLoad>
             This:SetText["minimum cap: ${UIElement[EVEBot].FindUsableChild[MinCapPctFlee,slider].Value}"]
            </OnLoad>
           </Text>
           <checkbox name='MinShieldPctLabelFleeGameOver'>
            <X>245</X>
            <Y>70</Y>
            <Height>20</Height>
            <Width>100</Width>
            <Text>gameover minimum shield: 0</Text>
            <AutoTooltip>If checked, use exit from EVE.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.GameOverShield}
             {
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetGameOverShield[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <slider name='MinShieldPctFleeGameOver'>
            <X>130</X>
            <Y>70</Y>
            <Width>110</Width>
            <Height>18</Height>
            <Range>100</Range>
            <OnLoad>
             This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.GameOverShieldTrashHold}]
             UIElement[EVEBot].FindUsableChild[MinShieldPctLabelFleeGameOver,checkbox]:SetText["gameover minimum shield: ${This.Value}"]
            </OnLoad>
            <OnChange>
             Script[EVEBot].VariableScope.Config.Combat:SetGameOverShieldTrashHold[${Int[${This.Value}]}]
             UIElement[EVEBot].FindUsableChild[MinShieldPctLabelFleeGameOver,checkbox]:SetText["gameover minimum shield: ${This.Value}"]
            </OnChange>
           </slider>
           <checkbox name='MinArmorPctLabelFleeGameOver'>
            <X>245</X>
            <Y>90</Y>
            <Height>20</Height>
            <Width>100</Width>
            <Text>gameover minimum armor: 0</Text>
            <AutoTooltip>If checked, use exit from EVE.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.GameOverArmor}
             {
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetGameOverArmor[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <slider name='MinArmorPctFleeGameOver'>
            <X>130</X>
            <Y>90</Y>
            <Width>110</Width>
            <Height>18</Height>
            <Range>100</Range>
            <OnLoad>
             This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.GameOverArmorTrashHold}]
             UIElement[EVEBot].FindUsableChild[MinArmorPctLabelFleeGameOver,checkbox]:SetText["gameover minimum armor: ${This.Value}"]
            </OnLoad>
            <OnChange>
             Script[EVEBot].VariableScope.Config.Combat:SetGameOverArmorTrashHold[${Int[${This.Value}]}]
             UIElement[EVEBot].FindUsableChild[MinArmorPctLabelFleeGameOver,checkbox]:SetText["gameover minimum armor: ${This.Value}"]
            </OnChange>
           </slider>
           <checkbox name='cbBreaks'>
            <X>10</X>
            <Y>170</Y>
            <Height>20</Height>
            <Width>100</Width>
            <Text>take a break for              hours every               hours</Text>
            <AutoTooltip>If checked, will dock your ship at your panic location every for a break according to the information specified. Restart after changing these values.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.TakeBreaks}
             {
             This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetTakeBreaks[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <combobox name='comboBreakDuration'>
            <X>120</X>
            <Y>170</Y>
            <Width>50</Width>
            <Height>15</Height>
            <FullHeight>200</FullHeight>
            <ButtonWidth>20</ButtonWidth>
            <Items>
             <Item Value='1'>1</Item>
             <Item Value='2'>2</Item>
             <Item Value='3'>3</Item>
             <Item Value='4'>4</Item>
             <Item Value='5'>5</Item>
            </Items>
            <OnSelect>
             Script[EVEBot].VariableScope.Config.Combat:SetBreakDuration[${This.SelectedItem.Value}]
            </OnSelect>
            <OnLoad>
             This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.BreakDuration}].ID}]
            </OnLoad>
           </combobox>
           <combobox name='comboTimeBetweenBreaks'>
            <X>240</X>
            <Y>170</Y>
            <Width>50</Width>
            <Height>15</Height>
            <FullHeight>200</FullHeight>
            <ButtonWidth>20</ButtonWidth>
            <Items>
             <Item Value='1'>1</Item>
             <Item Value='2'>2</Item>
             <Item Value='3'>3</Item>
             <Item Value='4'>4</Item>
             <Item Value='5'>5</Item>
             <Item Value='6'>6</Item>
            </Items>
            <OnSelect>
             Script[EVEBot].VariableScope.Config.Combat:SetTimeBetweenBreaks[${This.SelectedItem.Value}]
            </OnSelect>
            <OnLoad>
             This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.TimeBetweenBreaks}].ID}]
            </OnLoad>
           </combobox>
           <checkbox name='cbSafeCooldown'>
            <X>10</X>
            <Y>150</Y>
            <Height>20</Height>
            <Width>20</Width>
            <Text>wait              plus random              mins after neutral</Text>
            <AutoTooltip>If checked, will dock your ship at your panic location every for a break according to the information specified. Restart after changing these values.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.UseSafeCooldown}
             {
             This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetUseSafeCooldown[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <combobox name='comboSafeCooldown'>
            <X>55</X>
            <Y>150</Y>
            <Width>50</Width>
            <Height>15</Height>
            <FullHeight>200</FullHeight>
            <ButtonWidth>20</ButtonWidth>
            <Items>
             <Item Value='1'>1</Item>
             <Item Value='5'>5</Item>
             <Item Value='10'>10</Item>
             <Item Value='20'>20</Item>
             <Item Value='30'>30</Item>
             <Item Value='40'>40</Item>
             <Item Value='50'>50</Item>
             <Item Value='60'>60</Item>
            </Items>
            <OnSelect>
             Script[EVEBot].VariableScope.Config.Combat:SetSafeCooldown[${This.SelectedItem.Value}]
            </OnSelect>
            <OnLoad>
             This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.SafeCooldown}].ID}]
            </OnLoad>
           </combobox>
           <combobox name='comboSafeCooldownRandom'>
            <X>177</X>
            <Y>150</Y>
            <Width>50</Width>
            <Height>15</Height>
            <FullHeight>200</FullHeight>
            <ButtonWidth>20</ButtonWidth>
            <Items>
             <Item Value='1'>1</Item>
             <Item Value='5'>5</Item>
             <Item Value='10'>10</Item>
             <Item Value='20'>20</Item>
             <Item Value='30'>30</Item>
             <Item Value='40'>40</Item>
             <Item Value='50'>50</Item>
             <Item Value='60'>60</Item>
            </Items>
            <OnSelect>
             Script[EVEBot].VariableScope.Config.Combat:SetSafeCooldownRandom[${This.SelectedItem.Value}]
            </OnSelect>
            <OnLoad>
             This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.SafeCooldownRandom}].ID}]
            </OnLoad>
           </combobox>
           <checkbox name='cbGameOverGrid'>
            <X>115</X>
            <Y>110</Y>
            <Height>20</Height>
            <Width>100</Width>
            <text>gameover grid</text>
            <AutoTooltip>If checked, use emergency exit from EVE when someone except corpmates appears at grid.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.GameOverGrid}
             {
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetGameOverGrid[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbGameOverHostileScrambled'>
            <X>245</X>
            <Y>110</Y>
            <Height>20</Height>
            <Width>100</Width>
            <text>gameover hostile scrambled</text>
            <AutoTooltip>If checked, use emergency exit from EVE when ship scrambled and hostile appears at local.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.GameOverHostileScrambled}
             {
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetGameOverHostileScrambled[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbLootFaction'>
            <X>115</X>
            <Y>130</Y>
            <Height>20</Height>
            <Width>100</Width>
            <text>loot faction wreck</text>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.LootFaction}
             {
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetLootFaction[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbGameOverBlackList'>
            <X>345</X>
            <Y>130</Y>
            <Height>20</Height>
            <Width>100</Width>
            <text>gameover blacklist</text>
            <AutoTooltip>If checked, use exit from EVE when blacklisted user in local.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.GameOverBlackList}
             {
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetGameOverBlackList[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbAlwaysShieldBoost'>
            <X>345</X>
            <Y>150</Y>
            <Height>20</Height>
            <Width>100</Width>
            <text>always shield boost</text>
            <AutoTooltip>Turn Shield Booster on full-time, instead of on-demand.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.AlwaysShieldBoost}
             {
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetAlwaysShieldBoost[${This.Checked}]
            </OnLeftClick>
           </checkbox>
           <checkbox name='cbAlwaysArmorBoost'>
            <X>345</X>
            <Y>170</Y>
            <Height>20</Height>
            <Width>100</Width>
            <text>always armor boost</text>
            <AutoTooltip>Turn Armor Booster on full-time, instead of on-demand.</AutoTooltip>
            <OnLoad>
             if ${Script[EVEBot].VariableScope.Config.Combat.AlwaysArmorBoost}
             {
              This:SetChecked
             }
            </OnLoad>
            <OnLeftClick>
             Script[EVEBot].VariableScope.Config.Combat:SetAlwaysArmorBoost[${This.Checked}]
            </OnLeftClick>
           </checkbox>
          </children>
         </frame>
        </Tab>


        <Tab Name='whitelist'>
         <listbox name='lbWLLocal'>
          <x>10</x>
          <y>5</y>
          <width>180</width>
          <height>295</height>
          <sort>text</sort>
          <OnLeftClick>
           variable string l="WL"
           UIElement[EVEBot].FindUsableChild[lbFlee${l}Char,listbox]:ClearSelection
           UIElement[EVEBot].FindUsableChild[lbFlee${l}Corp,listbox]:ClearSelection
           UIElement[EVEBot].FindUsableChild[lbFlee${l}Ally,listbox]:ClearSelection
           UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry]:SetText[]
           UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry]:SetText[]
           UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry]:SetText[]
           UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry]:SetText[]
           UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry]:SetText[]
           UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry]:SetText[]
           if ${This.SelectedItems} > 0
           {
            UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].Name} (${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].CharID})]
            UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].CharID}]
            UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].Corp.Name} (${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].Corp.ID})]
            UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].Corp.ID}]
            UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].Alliance} (${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].AllianceID})]
            UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].AllianceID}]
           }
          </OnLeftClick>
         </listbox>
         <button name='btnWLRefresh' template='EveSkin.Window.ClickButton'>
          <x>20</x>
          <y>301</y>
          <width>160</width>
          <height>15</height>
          <text>refresh local</text>
          <OnLeftClick>
           variable string l="WL"
           variable string lbname = ${UIElement[EVEBot].FindUsableChild[lb${l}Local,listbox].FullName}
           variable index:pilot pilots
           variable iterator piter
           Script[EVEBot].VariableScope.UI.pilcol:EraseByQuery[${LavishScript.CreateQuery[TRUE]}]
           EVE:GetLocalPilots[pilots]
           pilots:GetIterator[piter]
           UIElement[${lbname}]:ClearItems
           if ${piter:First(exists)}
           {
            do
            {
             if !${piter.Value.CharID.Equal[${Me.CharID}]}
             {
              Script[EVEBot].VariableScope.UI.pilcol:Set[${piter.Value.CharID}, ${piter.Value}]
              UIElement[${lbname}]:AddItem[${piter.Value.Name}, ${piter.Value.CharID}]
             }
            }
            while ${piter:Next(exists)}
           }
           UIElement[${lbname}]:Sort
          </OnLeftClick>
         </button>
         <TabControl Name='FleeingWLTabcontrol' template='EVESkin.TabControl'>
          <x>195</x>
          <y>0</y>
          <width>305</width>
          <height>100%</height>
          <Tabs>
           <Tab name='char'>
            <frame name='charWLfleeFrame'>
             <x>0</x>
             <y>0</y>
             <width>100%</width>
             <height>100%</height>
             <children>
              <listbox name='lbFleeWLChar'>
               <x>10</x>
               <y>5</y>
               <width>285</width>
               <height>257</height>
               <sort>text</sort>
               <OnLoad>
                This:RightClick
               </OnLoad>
               <OnLeftClick>
                variable string l="WL"
                UIElement[EVEBot].FindUsableChild[lb${l}Local,listbox]:ClearSelection
                UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry]:SetText[]
                UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry]:SetText[]
                if ${This.SelectedItems} > 0
                {
                 UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry]:SetText[${This.SelectedItem[1].Text}]
                 UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry]:SetText[${This.SelectedItem[1].Value}]
                }
               </OnLeftClick>
               <OnRightClick>
                This:ClearItems
                variable iterator i
                Script[EVEBot].VariableScope.Whitelist.PilotsRef:GetSettingIterator[i]
                if ${i:First(exists)}
                {
                 do
                 {
                  This:AddItem[${i.Key},${i.Value}]
                 }
                 while ${i:Next(exists)}
                }
                This:Sort
               </OnRightClick>
              </listbox>
              <Text name='txFleeWLCharDesc'>
               <X>15</X>
               <Y>265</Y>
               <Width>40</Width>
               <Height>10</Height>
               <Text>desc:</Text>
              </Text>
              <TextEntry name='teFleeWLCharDesc'>
               <X>45</X>
               <Y>265</Y>
               <Width>243</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <Text name='txFleeWLCharID'>
               <X>15</X>
               <Y>283</Y>
               <Width>20</Width>
               <Height>10</Height>
               <Text>id:</Text>
              </Text>
              <TextEntry name='teFleeWLCharID'>
               <X>45</X>
               <Y>283</Y>
               <Width>205</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <button Name='btFleeWLCharAdd' template='EVEskin.Add.Texture'>
               <X>253</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="WL"
                variable int64 id=${UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry].Text}
                if !${id.Equal[0]}
                {
                 Script[EVEBot].VariableScope.Social:Add${l}[\
                  Pilot, \
                  ${id}, \
                  ${UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry].Text} \
                 ]
                }
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Char,listbox]:RightClick
               </OnLeftClick>
              </button>
              <button Name='btFleeWLCharRemove' template='EVEskin.Remove.Texture'>
               <X>272</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="WL"
                Script[EVEBot].VariableScope.Social:Del${l}[ \
                 Pilot, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry].Text}, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry].Text} \
                ]
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Char,listbox]:RightClick
               </OnLeftClick>
              </button>
             </children>
            </frame>
           </Tab>
           <Tab name='corp'>
            <frame name='corpWLfleeFrame'>
             <x>0</x>
             <y>0</y>
             <width>100%</width>
             <height>100%</height>
             <children>
              <listbox name='lbFleeWLCorp'>
               <x>10</x>
               <y>5</y>
               <width>285</width>
               <height>257</height>
               <sort>text</sort>
               <OnLoad>
                This:RightClick
               </OnLoad>
               <OnLeftClick>
                variable string l="WL"
                UIElement[EVEBot].FindUsableChild[lb${l}Local,listbox]:ClearSelection
                UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry]:SetText[]
                UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry]:SetText[]
                if ${This.SelectedItems} > 0
                {
                 UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry]:SetText[${This.SelectedItem[1].Text}]
                 UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry]:SetText[${This.SelectedItem[1].Value}]
                }
               </OnLeftClick>
               <OnRightClick>
                This:ClearItems
                variable iterator i
                Script[EVEBot].VariableScope.Whitelist.CorporationsRef:GetSettingIterator[i]
                if ${i:First(exists)}
                {
                 do
                 {
                  This:AddItem[${i.Key},${i.Value}]
                 }
                 while ${i:Next(exists)}
                }
                This:Sort
               </OnRightClick>
              </listbox>
              <Text name='txFleeWLCorpDesc'>
               <X>15</X>
               <Y>265</Y>
               <Width>40</Width>
               <Height>10</Height>
               <Text>desc:</Text>
              </Text>
              <TextEntry name='teFleeWLCorpDesc'>
               <X>45</X>
               <Y>265</Y>
               <Width>243</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <Text name='txFleeWLCorpID'>
               <X>15</X>
               <Y>283</Y>
               <Width>20</Width>
               <Height>10</Height>
               <Text>id:</Text>
              </Text>
              <TextEntry name='teFleeWLCorpID'>
               <X>45</X>
               <Y>283</Y>
               <Width>205</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <button Name='btFleeWLCorpAdd' template='EVEskin.Add.Texture'>
               <X>253</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="WL"
                variable int64 id=${UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry].Text}
                if !${id.Equal[0]}
                {
                 Script[EVEBot].VariableScope.Social:Add${l}[\
                  Corporation, \
                  ${id}, \
                  ${UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry].Text} \
                 ]
                }
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Corp,listbox]:RightClick
               </OnLeftClick>
              </button>
              <button Name='btFleeWLCorpRemove' template='EVEskin.Remove.Texture'>
               <X>272</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="WL"
                Script[EVEBot].VariableScope.Social:Del${l}[ \
                 Corporation, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry].Text}, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry].Text} \
                ]
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Corp,listbox]:RightClick
               </OnLeftClick>
              </button>
             </children>
            </frame>
           </Tab>
           <Tab name='ally'>
            <frame name='allyWLfleeFrame'>
             <x>0</x>
             <y>0</y>
             <width>100%</width>
             <height>100%</height>
             <children>
              <listbox name='lbFleeWLAlly'>
               <x>10</x>
               <y>5</y>
               <width>285</width>
               <height>257</height>
               <sort>text</sort>
               <OnLoad>
                This:RightClick
               </OnLoad>
               <OnLeftClick>
                variable string l="WL"
                UIElement[EVEBot].FindUsableChild[lb${l}Local,listbox]:ClearSelection
                UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry]:SetText[]
                UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry]:SetText[]
                if ${This.SelectedItems} > 0
                {
                 UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry]:SetText[${This.SelectedItem[1].Text}]
                 UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry]:SetText[${This.SelectedItem[1].Value}]
                }
               </OnLeftClick>
               <OnRightClick>
                This:ClearItems
                variable iterator i
                Script[EVEBot].VariableScope.Whitelist.AlliancesRef:GetSettingIterator[i]
                if ${i:First(exists)}
                {
                 do
                 {
                  This:AddItem[${i.Key},${i.Value}]
                 }
                 while ${i:Next(exists)}
                }
                This:Sort
               </OnRightClick>
              </listbox>
              <Text name='txFleeWLAllyDesc'>
               <X>15</X>
               <Y>265</Y>
               <Width>40</Width>
               <Height>10</Height>
               <Text>desc:</Text>
              </Text>
              <TextEntry name='teFleeWLAllyDesc'>
               <X>45</X>
               <Y>265</Y>
               <Width>243</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <Text name='txFleeWLAllyID'>
               <X>15</X>
               <Y>283</Y>
               <Width>20</Width>
               <Height>10</Height>
               <Text>id:</Text>
              </Text>
              <TextEntry name='teFleeWLAllyID'>
               <X>45</X>
               <Y>283</Y>
               <Width>205</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <button Name='btFleeWLAllyAdd' template='EVEskin.Add.Texture'>
               <X>253</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="WL"
                variable int64 id=${UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry].Text}
                if !${id.Equal[0]}
                {
                 Script[EVEBot].VariableScope.Social:Add${l}[\
                  Alliance, \
                  ${id}, \
                  ${UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry].Text} \
                 ]
                }
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Ally,listbox]:RightClick
               </OnLeftClick>
              </button>
              <button Name='btFleeWLAllyRemove' template='EVEskin.Remove.Texture'>
               <X>272</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="WL"
                Script[EVEBot].VariableScope.Social:Del${l}[ \
                 Alliance, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry].Text}, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry].Text} \
                ]
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Ally,listbox]:RightClick
               </OnLeftClick>
              </button>
             </children>
            </frame>
           </Tab>
          </Tabs>
         </TabControl>
        </Tab>
        <Tab Name='blacklist'>
         <listbox name='lbBLLocal'>
          <x>10</x>
          <y>5</y>
          <width>180</width>
          <height>295</height>
          <sort>text</sort>
          <OnLeftClick>
           variable string l="BL"
           UIElement[EVEBot].FindUsableChild[lbFlee${l}Char,listbox]:ClearSelection
           UIElement[EVEBot].FindUsableChild[lbFlee${l}Corp,listbox]:ClearSelection
           UIElement[EVEBot].FindUsableChild[lbFlee${l}Ally,listbox]:ClearSelection
           UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry]:SetText[]
           UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry]:SetText[]
           UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry]:SetText[]
           UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry]:SetText[]
           UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry]:SetText[]
           UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry]:SetText[]
           if ${This.SelectedItems} > 0
           {
            UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].Name} (${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].CharID})]
            UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].CharID}]
            UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].Corp.Name} (${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].Corp.ID})]
            UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].Corp.ID}]
            UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].Alliance} (${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].AllianceID})]
            UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry]:SetText[${Script[EVEBot].VariableScope.UI.pilcol.Element[${This.SelectedItem[1].Value}].AllianceID}]
           }
          </OnLeftClick>
         </listbox>
         <button name='btnBLRefresh' template='EveSkin.Window.ClickButton'>
          <x>20</x>
          <y>301</y>
          <width>160</width>
          <height>15</height>
          <text>refresh local</text>
          <OnLeftClick>
           variable string l="BL"
           variable string lbname = ${UIElement[EVEBot].FindUsableChild[lb${l}Local,listbox].FullName}
           variable index:pilot pilots
           variable iterator piter
           Script[EVEBot].VariableScope.UI.pilcol:EraseByQuery[${LavishScript.CreateQuery[TRUE]}]
           EVE:GetLocalPilots[pilots]
           pilots:GetIterator[piter]
           UIElement[${lbname}]:ClearItems
           if ${piter:First(exists)}
           {
            do
            {
             if !${piter.Value.CharID.Equal[${Me.CharID}]}
             {
              Script[EVEBot].VariableScope.UI.pilcol:Set[${piter.Value.CharID}, ${piter.Value}]
              UIElement[${lbname}]:AddItem[${piter.Value.Name}, ${piter.Value.CharID}]
             }
            }
            while ${piter:Next(exists)}
           }
           UIElement[${lbname}]:Sort
          </OnLeftClick>
         </button>
         <TabControl Name='FleeingBLTabcontrol' template='EVESkin.TabControl'>
          <x>195</x>
          <y>0</y>
          <width>305</width>
          <height>100%</height>
          <Tabs>
           <Tab name='char'>
            <frame name='charBLfleeFrame'>
             <x>0</x>
             <y>0</y>
             <width>100%</width>
             <height>100%</height>
             <children>
              <listbox name='lbFleeBLChar'>
               <x>10</x>
               <y>5</y>
               <width>285</width>
               <height>257</height>
               <sort>text</sort>
               <OnLoad>
                This:RightClick
               </OnLoad>
               <OnLeftClick>
                variable string l="BL"
                UIElement[EVEBot].FindUsableChild[lb${l}Local,listbox]:ClearSelection
                UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry]:SetText[]
                UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry]:SetText[]
                if ${This.SelectedItems} > 0
                {
                 UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry]:SetText[${This.SelectedItem[1].Text}]
                 UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry]:SetText[${This.SelectedItem[1].Value}]
                }
               </OnLeftClick>
               <OnRightClick>
                This:ClearItems
                variable iterator i
                Script[EVEBot].VariableScope.Blacklist.PilotsRef:GetSettingIterator[i]
                if ${i:First(exists)}
                {
                 do
                 {
                  This:AddItem[${i.Key},${i.Value}]
                 }
                 while ${i:Next(exists)}
                }
                This:Sort
               </OnRightClick>
              </listbox>
              <Text name='txFleeBLCharDesc'>
               <X>15</X>
               <Y>265</Y>
               <Width>40</Width>
               <Height>10</Height>
               <Text>desc:</Text>
              </Text>
              <TextEntry name='teFleeBLCharDesc'>
               <X>45</X>
               <Y>265</Y>
               <Width>243</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <Text name='txFleeBLCharID'>
               <X>15</X>
               <Y>283</Y>
               <Width>20</Width>
               <Height>10</Height>
               <Text>id:</Text>
              </Text>
              <TextEntry name='teFleeBLCharID'>
               <X>45</X>
               <Y>283</Y>
               <Width>205</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <button Name='btFleeBLCharAdd' template='EVEskin.Add.Texture'>
               <X>253</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="BL"
                variable int64 id=${UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry].Text}
                if !${id.Equal[0]}
                {
                 Script[EVEBot].VariableScope.Social:Add${l}[\
                  Pilot, \
                  ${id}, \
                  ${UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry].Text} \
                 ]
                }
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Char,listbox]:RightClick
               </OnLeftClick>
              </button>
              <button Name='btFleeBLCharRemove' template='EVEskin.Remove.Texture'>
               <X>272</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="BL"
                Script[EVEBot].VariableScope.Social:Del${l}[ \
                 Pilot, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}CharID,TextEntry].Text}, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}CharDesc,TextEntry].Text} \
                ]
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Char,listbox]:RightClick
               </OnLeftClick>
              </button>
             </children>
            </frame>
           </Tab>
           <Tab name='corp'>
            <frame name='corpBLfleeFrame'>
             <x>0</x>
             <y>0</y>
             <width>100%</width>
             <height>100%</height>
             <children>
              <listbox name='lbFleeBLCorp'>
               <x>10</x>
               <y>5</y>
               <width>285</width>
               <height>257</height>
               <sort>text</sort>
               <OnLoad>
                This:RightClick
               </OnLoad>
               <OnLeftClick>
                variable string l="BL"
                UIElement[EVEBot].FindUsableChild[lb${l}Local,listbox]:ClearSelection
                UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry]:SetText[]
                UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry]:SetText[]
                if ${This.SelectedItems} > 0
                {
                 UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry]:SetText[${This.SelectedItem[1].Text}]
                 UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry]:SetText[${This.SelectedItem[1].Value}]
                }
               </OnLeftClick>
               <OnRightClick>
                This:ClearItems
                variable iterator i
                Script[EVEBot].VariableScope.Blacklist.CorporationsRef:GetSettingIterator[i]
                if ${i:First(exists)}
                {
                 do
                 {
                  This:AddItem[${i.Key},${i.Value}]
                 }
                 while ${i:Next(exists)}
                }
                This:Sort
               </OnRightClick>
              </listbox>
              <Text name='txFleeBLCorpDesc'>
               <X>15</X>
               <Y>265</Y>
               <Width>40</Width>
               <Height>10</Height>
               <Text>desc:</Text>
              </Text>
              <TextEntry name='teFleeBLCorpDesc'>
               <X>45</X>
               <Y>265</Y>
               <Width>243</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <Text name='txFleeBLCorpID'>
               <X>15</X>
               <Y>283</Y>
               <Width>20</Width>
               <Height>10</Height>
               <Text>id:</Text>
              </Text>
              <TextEntry name='teFleeBLCorpID'>
               <X>45</X>
               <Y>283</Y>
               <Width>205</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <button Name='btFleeBLCorpAdd' template='EVEskin.Add.Texture'>
               <X>253</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="BL"
                variable int64 id=${UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry].Text}
                if !${id.Equal[0]}
                {
                 Script[EVEBot].VariableScope.Social:Add${l}[\
                  Corporation, \
                  ${id}, \
                  ${UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry].Text} \
                 ]
                }
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Corp,listbox]:RightClick
               </OnLeftClick>
              </button>
              <button Name='btFleeBLCorpRemove' template='EVEskin.Remove.Texture'>
               <X>272</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="BL"
                Script[EVEBot].VariableScope.Social:Del${l}[ \
                 Corporation, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}CorpID,TextEntry].Text}, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}CorpDesc,TextEntry].Text} \
                ]
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Corp,listbox]:RightClick
               </OnLeftClick>
              </button>
             </children>
            </frame>
           </Tab>
           <Tab name='ally'>
            <frame name='allyBLfleeFrame'>
             <x>0</x>
             <y>0</y>
             <width>100%</width>
             <height>100%</height>
             <children>
              <listbox name='lbFleeBLAlly'>
               <x>10</x>
               <y>5</y>
               <width>285</width>
               <height>257</height>
               <sort>text</sort>
               <OnLoad>
                This:RightClick
               </OnLoad>
               <OnLeftClick>
                variable string l="BL"
                UIElement[EVEBot].FindUsableChild[lb${l}Local,listbox]:ClearSelection
                UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry]:SetText[]
                UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry]:SetText[]
                if ${This.SelectedItems} > 0
                {
                 UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry]:SetText[${This.SelectedItem[1].Text}]
                 UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry]:SetText[${This.SelectedItem[1].Value}]
                }
               </OnLeftClick>
               <OnRightClick>
                This:ClearItems
                variable iterator i
                Script[EVEBot].VariableScope.Blacklist.AlliancesRef:GetSettingIterator[i]
                if ${i:First(exists)}
                {
                 do
                 {
                  This:AddItem[${i.Key},${i.Value}]
                 }
                 while ${i:Next(exists)}
                }
                This:Sort
               </OnRightClick>
              </listbox>
              <Text name='txFleeBLAllyDesc'>
               <X>15</X>
               <Y>265</Y>
               <Width>40</Width>
               <Height>10</Height>
               <Text>desc:</Text>
              </Text>
              <TextEntry name='teFleeBLAllyDesc'>
               <X>45</X>
               <Y>265</Y>
               <Width>243</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <Text name='txFleeBLAllyID'>
               <X>15</X>
               <Y>283</Y>
               <Width>20</Width>
               <Height>10</Height>
               <Text>id:</Text>
              </Text>
              <TextEntry name='teFleeBLAllyID'>
               <X>45</X>
               <Y>283</Y>
               <Width>205</Width>
               <Height>16</Height>
               <MaxLength>50</MaxLength>
              </TextEntry>
              <button Name='btFleeBLAllyAdd' template='EVEskin.Add.Texture'>
               <X>253</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="BL"
                variable int64 id=${UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry].Text}
                if !${id.Equal[0]}
                {
                 Script[EVEBot].VariableScope.Social:Add${l}[\
                  Alliance, \
                  ${id}, \
                  ${UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry].Text} \
                 ]
                }
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Ally,listbox]:RightClick
               </OnLeftClick>
              </button>
              <button Name='btFleeBLAllyRemove' template='EVEskin.Remove.Texture'>
               <X>272</X>
               <Y>283</Y>
               <Width>16</Width>
               <Height>16</Height>
               <OnLeftClick>
                variable string l="BL"
                Script[EVEBot].VariableScope.Social:Del${l}[ \
                 Alliance, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}AllyID,TextEntry].Text}, \
                 ${UIElement[EVEBot].FindUsableChild[teFlee${l}AllyDesc,TextEntry].Text} \
                ]
                UIElement[EVEBot].FindUsableChild[lbFlee${l}Ally,listbox]:RightClick
               </OnLeftClick>
              </button>
             </children>
            </frame>
           </Tab>
          </Tabs>
         </TabControl>
        </Tab>
       </Tabs>
      </TabControl>
     </Tab>
    </Tabs>
   </TabControl>
  </Children>
 </window>
</ISUI>
